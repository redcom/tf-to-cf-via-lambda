"use strict"

const { S3Client, GetObjectCommand, ListObjectsCommand } = require('@aws-sdk/client-s3')
const get = require("lodash.get")

const aws_config = { region: process.env.region }
const bucketName = process.env.bucket_name

const s3 = s3Client(aws_config)

const terraformState = async (event, context) => {
  console.log(event, context)
  try {

    const files = await getAllFiles(bucketName)
    const combinedContent = await combineAllFiles(files, bucketName)


    /* this should be a json object with signature
        {
          "filters": ["alb.ln_arn"]
        }
        */
    const requestWithFilters = event.body ? JSON.parse(event.body) : null

    if (!requestWithFilters) {
      return combinedContent
    }

    const outputs = extractFilteredOutput(combinedContent, requestWithFilters)
    return outputs

  } catch(e) {
    throw e

  }
}

function extractFilteredOutput(combinedContent, requestWithFilters) {
  // use lodash.get to extract object at path
  const filteredResults = requestWithFilters.filters.reduce((acc, aFilter) => {
    const obj = get(combinedContent, aFilter)
    acc[aFilter] =  obj && obj.value ? obj.value : null
    return acc
  }, {})

  return filteredResults

}

async function combineAllFiles(files, bucketName) {
  const allCombined = {}
  if (!files.length) return {}

  const promises = files.map(file => {
    // extract the resource name based on the filename with terraform state
    const resourceName = file.name.match(/(.*)\/(.*)\/(.*)/)[2]
    allCombined[resourceName] = {}
    const params = { Bucket: bucketName, Key: file.name}
    return s3.send(new GetObjectCommand(params))
  })

  const allFilesContentPomises = await Promise.allSettled(promises)


  // temporary create an array of grouped resources and use the index of it to populate with information from file
  const objectKeys = Object.keys(allCombined)
  for (let index = 0; index < allFilesContentPomises.length; index++) {
    const fc = allFilesContentPomises[index]


    if (fc.status === "fulfilled") {
      // read data from Readable stream return by aws-sdk/s3 client
      let data = ""
      for await (const chunk of fc.value.Body) {
        data += chunk
      }
      const json = JSON.parse(data)
      // combine all outputs into a single object assigning to each type of resource created its output from terraform configuration
      allCombined[objectKeys[index]] = json.outputs // For solution sake we are interested only in the outputs generated by terraform modules
    }
  }

  return allCombined
}

async function getAllFiles(bucketName) {
  const params = { Bucket: bucketName }
  const response = await s3.send(new ListObjectsCommand(params))

  if (response && response.$metadata && response.$metadata.httpStatusCode === 200) {
    if (!response.Contents) return []
    const files = response.Contents.map(({Key, LastModified, Size}) => {
      return {name: Key, updated_at: LastModified, size: Size}
    })
    return files
  }
}

function s3Client(aws_config) {
  return  new S3Client(aws_config)
}


module.exports.terraformState = terraformState

