##------------------------------------
## This is the entry point in the project
##
## NOTE: update versions in `global-vars.hcl` needed 
##--------------------------------

terraform_binary              = "terraform-1.2.5"
terraform_version_constraint  = "= 1.2.5"
terragrunt_version_constraint = "= 0.38.5"

##-----------------------------------------------------------------------------
## Define local variables available only in this file
## Global variables are defined in the `global.hcl` file
## Variables automatically supplied to all modules are defined in the `inputs` block below
##-----------------------------------------------------------------------------
locals {
  # Load global variables
  global_vars  = read_terragrunt_config(find_in_parent_folders("global.hcl")).locals.merged
  account_name = local.global_vars.account_name
  account_id   = local.global_vars.account_id

  ##-----------------------------------------------------------------------------
  ## Configure Terraform's S3 remote state backend via Terragrunt
  ## This will be generated by each child `terragrunt.hcl` file
  ##-----------------------------------------------------------------------------
  remote_state_config = {
    backend = "s3"

    config = {
      role_arn       = local.global_vars.remote_state_role_arn
      session_name   = local.global_vars.remote_state_session_name
      encrypt        = true
      region         = local.global_vars.remote_state_region
      dynamodb_table = null ## not enabled for the sake of exercise
      bucket         = local.global_vars.remote_state_bucket_name
      acl            = local.global_vars.remote_state_bucket_acl
      key            = "${path_relative_to_include()}/terraform.tfstate"
      # Terraform state paths in s3 bucket correspond to the folder structure in this repository
    }

    generate = {
      path      = "generated-backend.tf"
      if_exists = "overwrite_terragrunt"
    }
  }
}

remote_state = local.remote_state_config

##-----------------------------------------------------------------------------
## Configure Terragrunt to generate a `generated-provider.tf` file
## This will be generated by each child `terragrunt.hcl` file
##-----------------------------------------------------------------------------
generate "provider" {
  path      = "generated-provider.tf"
  if_exists = "overwrite_terragrunt"
  contents  = <<EOF
%{for region in ["${local.global_vars.provider_region}", "us-east-2"]~}

provider "aws" {

%{if region != "${local.global_vars.provider_region}"~}
  alias  = "${region}"
%{endif~}
  region = "${region}"

## Tag all resources
  default_tags {
    tags = {
%{for key, value in local.global_vars.default_tags~}
      "${key}" = "${value}"
%{endfor~}
    }
  }

  assume_role {
    role_arn     = "arn:aws:iam::${local.account_id}:role/${local.global_vars.provisioning_role_name}"
    session_name = "${local.global_vars.provisioning_session_name}"
  }
}

%{endfor~}
EOF
}

##-----------------------------------------------------------------------------
## Configure Terragrunt to generate a terraform provider lock file
## This will be generated by each child `terragrunt.hcl` file
##-----------------------------------------------------------------------------
generate "provider_lock" {
  path      = ".terraform.lock.hcl"
  if_exists = "overwrite"
  contents  = <<EOF
# This file is maintained automagically.
# Manual edits will be lost.

provider "registry.terraform.io/hashicorp/aws" {
  version = "4.22.0"
}
EOF
}

# ---------------------------------------------------------------------------------------------------------------------
# Global variables
# These are automatically merged into the child `terragrunt.hcl` files and supplied to all modules
# ---------------------------------------------------------------------------------------------------------------------
inputs = merge(
  local.global_vars,
  {
    "account_name" = local.account_name,
    "account_id"   = local.account_id
  }
)
